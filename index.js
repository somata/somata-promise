// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, PromiseClient, PromiseService, callPromise, somata, wrappedPromise, wrappedPromises,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  somata = require('somata');

  Promise = require('bluebird');

  callPromise = function(promise, cb) {
    return promise.then(function(result) {
      return cb(null, result);
    })["catch"](function(error) {
      console.error(error);
      return cb(error);
    });
  };

  wrappedPromise = function(promise) {
    return function() {
      var args, cb, i;
      args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return callPromise(promise.apply(null, args), cb);
    };
  };

  wrappedPromises = function(_o) {
    var k, o, v;
    o = {};
    for (k in _o) {
      v = _o[k];
      o[k] = wrappedPromise(v);
      console.log(k);
    }
    return o;
  };

  PromiseClient = (function(superClass) {
    extend(PromiseClient, superClass);

    function PromiseClient() {
      return PromiseClient.__super__.constructor.apply(this, arguments);
    }

    PromiseClient.prototype.remote = function() {
      var args, gotfns, method, promise, service_name;
      service_name = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      gotfns = {};
      promise = new Promise(function(resolve, reject) {
        gotfns.resolver = resolve;
        return gotfns.rejecter = reject;
      });
      PromiseClient.__super__.remote.apply(this, [service_name, method].concat(slice.call(args), [function(err, got) {
        if (err) {
          return gotfns.rejecter(err);
        } else {
          return gotfns.resolver(got);
        }
      }]));
      return promise;
    };

    return PromiseClient;

  })(somata.Client);

  PromiseService = (function(superClass) {
    extend(PromiseService, superClass);

    function PromiseService(name, methods, options) {
      this.name = name;
      this.methods = methods != null ? methods : {};
      if (options == null) {
        options = {};
      }
      PromiseService.__super__.constructor.call(this, this.name, wrappedPromises(this.methods), options);
    }

    return PromiseService;

  })(somata.Service);

  module.exports = {
    Client: PromiseClient,
    Service: PromiseService
  };

}).call(this);
